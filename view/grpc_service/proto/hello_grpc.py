# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: hello.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

from view.grpc_service.proto import hello_pb2


class HelloBase(abc.ABC):

    @abc.abstractmethod
    async def hello_action(self, stream: 'grpclib.server.Stream[hello_pb2.HelloRequest, hello_pb2.HelloResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/sample.Hello/hello_action': grpclib.const.Handler(
                self.hello_action,
                grpclib.const.Cardinality.UNARY_UNARY,
                hello_pb2.HelloRequest,
                hello_pb2.HelloResponse,
            ),
        }


class HelloStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.hello_action = grpclib.client.UnaryUnaryMethod(
            channel,
            '/sample.Hello/hello_action',
            hello_pb2.HelloRequest,
            hello_pb2.HelloResponse,
        )
